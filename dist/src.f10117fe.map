{"version":3,"sources":["src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,+BAAA;AAAA;AAAA,YAAA;AAGI,WAAA,+BAAA,GAAA;AAFQ,SAAA,WAAA,GAAsC,EAAtC;AAES;;AAEV,EAAA,+BAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,OAAjB,EAAgC;AAAhC,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,OAAO,CAAC,OAAR,CAAgB,GAAhB,KAAwB,CAAC,CAA7B,EAAgC;AAC5B,YAAM,6BAAN;AACH,KAH2B,CAK5B;;;AACA,IAAA,OAAO,CAAC,KAAR,CAAc,GAAd,EAAmB,OAAnB,CAA2B,UAAA,OAAA,EAAO;AAC9B,UAAI,KAAI,CAAC,SAAL,CAAe,OAAf,CAAJ,EAA6B;AACzB,QAAA,KAAI,CAAC,WAAL,CAAiB,IAAjB,CAAsB,KAAI,CAAC,QAAL,CAAc,OAAd,CAAtB;AACH,OAFD,MAEO;AACH,QAAA,OAAO,GAAG,OAAO,CAAC,IAAR,EAAV;;AACA,YAAI,OAAO,KAAK,GAAhB,EAAqB;AACjB,UAAA,KAAI,CAAC,WAAL,CAAiB,IAAjB,CAAsB,KAAI,CAAC,GAAL,CAAS,KAAI,CAAC,WAAL,CAAiB,GAAjB,EAAT,EAAiC,KAAI,CAAC,WAAL,CAAiB,GAAjB,EAAjC,CAAtB;AACH,SAFD,MAEO;AACH,UAAA,KAAI,CAAC,WAAL,CAAiB,IAAjB,CAAsB,KAAI,CAAC,QAAL,CAAc,KAAI,CAAC,WAAL,CAAiB,GAAjB,EAAd,EAAsC,KAAI,CAAC,WAAL,CAAiB,GAAjB,EAAtC,CAAtB;AACH;AACJ;;AACD,MAAA,OAAO,CAAC,GAAR,CAAY,KAAI,CAAC,WAAjB;AACH,KAZD;AAcA,WAAO,KAAK,WAAL,CAAiB,GAAjB,EAAP;AACH,GArBM;AAuBP;;;;;;AAIQ,EAAA,+BAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,eAAlB,EAAyC;AACrC,WAAO,MAAM,CAAC,SAAP,CAAiB,KAAK,QAAL,CAAc,eAAd,CAAjB,CAAP;AACH,GAFO;;AAIA,EAAA,+BAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,UAAjB,EAAmC;AAC/B,WAAO,QAAQ,CAAC,UAAD,EAAa,EAAb,CAAf;AACH,GAFO;;AAIA,EAAA,+BAAA,CAAA,SAAA,CAAA,GAAA,GAAR,UAAY,GAAZ,EAAiB,GAAjB,EAAoB;AAChB,WAAO,GAAG,GAAG,GAAb;AACH,GAFO;;AAIA,EAAA,+BAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,GAAjB,EAAsB,GAAtB,EAAyB;AACrB,WAAO,GAAG,GAAG,GAAb;AACH,GAFO;;AAGZ,SAAA,+BAAA;AA/CA,CAAA,EAAA;;AAiDA,CACI,eADJ,EAEI,eAFJ,EAGI,WAHJ,EAIE,OAJF,CAIU,UAAA,OAAA,EAAO;AACb,MAAM,IAAI,GAAG,IAAI,+BAAJ,EAAb;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AAEA,EAAA,OAAO,CAAC,GAAR,CAAY,YAAU,OAAtB,EAAiC,aAAW,IAAI,CAAC,SAAL,CAAe,OAAf,CAA5C;AACH,CATD","file":"src.f10117fe.map","sourceRoot":"..","sourcesContent":["class ReversePolishNotationCalculator {\n    private commandList: Array<number | string> = []\n\n    constructor() { }\n\n    public calculate(command: string) {\n        if (command.indexOf(',') == -1) {\n            throw 'Doesnt seem to be a list...'\n        }\n\n        // parse the command into an array of integers and instructions\n        command.split(',').forEach(command => {\n            if (this.isInteger(command)) {\n                this.commandList.push(this.parseInt(command))\n            } else {\n                command = command.trim()\n                if (command === '+') {\n                    this.commandList.push(this.add(this.commandList.pop(), this.commandList.pop()))\n                } else {\n                    this.commandList.push(this.subtract(this.commandList.pop(), this.commandList.pop()))\n                }\n            }\n            console.log(this.commandList)\n        })\n\n        return this.commandList.pop()\n    }\n\n    /**\n     * Tells you if this string can be an integer\n     * @param possibleInteger the thing you want to check\n     */\n    private isInteger(possibleInteger: string): boolean {\n        return Number.isInteger(this.parseInt(possibleInteger))\n    }\n\n    private parseInt(commandInt: string): number {\n        return parseInt(commandInt, 10)\n    }\n\n    private add(op1, op2): number {\n        return op1 + op2;\n    }\n\n    private subtract(op1, op2): number {\n        return op2 - op1;\n    }\n}\n\n[\n    '1, 1, 2, +, +',\n    '1, 2, +, 3, -',\n    '1,2,3,+,-'\n].forEach(command => {\n    const calc = new ReversePolishNotationCalculator()\n    console.log(' ')\n\n    console.log(`input: ${command}`, `output: ${calc.calculate(command)}`)\n})\n"]}